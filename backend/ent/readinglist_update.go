// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/morsok/comic-handler/ent/predicate"
	"github.com/morsok/comic-handler/ent/readinglist"
)

// ReadingListUpdate is the builder for updating ReadingList entities.
type ReadingListUpdate struct {
	config
	hooks    []Hook
	mutation *ReadingListMutation
}

// Where appends a list predicates to the ReadingListUpdate builder.
func (rlu *ReadingListUpdate) Where(ps ...predicate.ReadingList) *ReadingListUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// Mutation returns the ReadingListMutation object of the builder.
func (rlu *ReadingListUpdate) Mutation() *ReadingListMutation {
	return rlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *ReadingListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReadingListMutation](ctx, rlu.sqlSave, rlu.mutation, rlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *ReadingListUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *ReadingListUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *ReadingListUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rlu *ReadingListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readinglist.Table,
			Columns: readinglist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: readinglist.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readinglist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlu.mutation.done = true
	return n, nil
}

// ReadingListUpdateOne is the builder for updating a single ReadingList entity.
type ReadingListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReadingListMutation
}

// Mutation returns the ReadingListMutation object of the builder.
func (rluo *ReadingListUpdateOne) Mutation() *ReadingListMutation {
	return rluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *ReadingListUpdateOne) Select(field string, fields ...string) *ReadingListUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated ReadingList entity.
func (rluo *ReadingListUpdateOne) Save(ctx context.Context) (*ReadingList, error) {
	return withHooks[*ReadingList, ReadingListMutation](ctx, rluo.sqlSave, rluo.mutation, rluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *ReadingListUpdateOne) SaveX(ctx context.Context) *ReadingList {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *ReadingListUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *ReadingListUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rluo *ReadingListUpdateOne) sqlSave(ctx context.Context) (_node *ReadingList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readinglist.Table,
			Columns: readinglist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: readinglist.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReadingList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, readinglist.FieldID)
		for _, f := range fields {
			if !readinglist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != readinglist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ReadingList{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readinglist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rluo.mutation.done = true
	return _node, nil
}
