// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/morsok/comic-handler/ent/predicate"
	"github.com/morsok/comic-handler/ent/releaseweek"
)

// ReleaseWeekUpdate is the builder for updating ReleaseWeek entities.
type ReleaseWeekUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseWeekMutation
}

// Where appends a list predicates to the ReleaseWeekUpdate builder.
func (rwu *ReleaseWeekUpdate) Where(ps ...predicate.ReleaseWeek) *ReleaseWeekUpdate {
	rwu.mutation.Where(ps...)
	return rwu
}

// Mutation returns the ReleaseWeekMutation object of the builder.
func (rwu *ReleaseWeekUpdate) Mutation() *ReleaseWeekMutation {
	return rwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rwu *ReleaseWeekUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReleaseWeekMutation](ctx, rwu.sqlSave, rwu.mutation, rwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwu *ReleaseWeekUpdate) SaveX(ctx context.Context) int {
	affected, err := rwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rwu *ReleaseWeekUpdate) Exec(ctx context.Context) error {
	_, err := rwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwu *ReleaseWeekUpdate) ExecX(ctx context.Context) {
	if err := rwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rwu *ReleaseWeekUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaseweek.Table,
			Columns: releaseweek.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseweek.FieldID,
			},
		},
	}
	if ps := rwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaseweek.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rwu.mutation.done = true
	return n, nil
}

// ReleaseWeekUpdateOne is the builder for updating a single ReleaseWeek entity.
type ReleaseWeekUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseWeekMutation
}

// Mutation returns the ReleaseWeekMutation object of the builder.
func (rwuo *ReleaseWeekUpdateOne) Mutation() *ReleaseWeekMutation {
	return rwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rwuo *ReleaseWeekUpdateOne) Select(field string, fields ...string) *ReleaseWeekUpdateOne {
	rwuo.fields = append([]string{field}, fields...)
	return rwuo
}

// Save executes the query and returns the updated ReleaseWeek entity.
func (rwuo *ReleaseWeekUpdateOne) Save(ctx context.Context) (*ReleaseWeek, error) {
	return withHooks[*ReleaseWeek, ReleaseWeekMutation](ctx, rwuo.sqlSave, rwuo.mutation, rwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwuo *ReleaseWeekUpdateOne) SaveX(ctx context.Context) *ReleaseWeek {
	node, err := rwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rwuo *ReleaseWeekUpdateOne) Exec(ctx context.Context) error {
	_, err := rwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwuo *ReleaseWeekUpdateOne) ExecX(ctx context.Context) {
	if err := rwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rwuo *ReleaseWeekUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseWeek, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   releaseweek.Table,
			Columns: releaseweek.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: releaseweek.FieldID,
			},
		},
	}
	id, ok := rwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReleaseWeek.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releaseweek.FieldID)
		for _, f := range fields {
			if !releaseweek.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releaseweek.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ReleaseWeek{config: rwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releaseweek.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rwuo.mutation.done = true
	return _node, nil
}
