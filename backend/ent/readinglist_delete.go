// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/morsok/comic-handler/ent/predicate"
	"github.com/morsok/comic-handler/ent/readinglist"
)

// ReadingListDelete is the builder for deleting a ReadingList entity.
type ReadingListDelete struct {
	config
	hooks    []Hook
	mutation *ReadingListMutation
}

// Where appends a list predicates to the ReadingListDelete builder.
func (rld *ReadingListDelete) Where(ps ...predicate.ReadingList) *ReadingListDelete {
	rld.mutation.Where(ps...)
	return rld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rld *ReadingListDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ReadingListMutation](ctx, rld.sqlExec, rld.mutation, rld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rld *ReadingListDelete) ExecX(ctx context.Context) int {
	n, err := rld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rld *ReadingListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: readinglist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: readinglist.FieldID,
			},
		},
	}
	if ps := rld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rld.mutation.done = true
	return affected, err
}

// ReadingListDeleteOne is the builder for deleting a single ReadingList entity.
type ReadingListDeleteOne struct {
	rld *ReadingListDelete
}

// Where appends a list predicates to the ReadingListDelete builder.
func (rldo *ReadingListDeleteOne) Where(ps ...predicate.ReadingList) *ReadingListDeleteOne {
	rldo.rld.mutation.Where(ps...)
	return rldo
}

// Exec executes the deletion query.
func (rldo *ReadingListDeleteOne) Exec(ctx context.Context) error {
	n, err := rldo.rld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{readinglist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rldo *ReadingListDeleteOne) ExecX(ctx context.Context) {
	if err := rldo.Exec(ctx); err != nil {
		panic(err)
	}
}
