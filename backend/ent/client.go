// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/morsok/comic-handler/ent/migrate"

	"github.com/morsok/comic-handler/ent/issue"
	"github.com/morsok/comic-handler/ent/readinglist"
	"github.com/morsok/comic-handler/ent/releaseweek"
	"github.com/morsok/comic-handler/ent/serie"
	"github.com/morsok/comic-handler/ent/storyarc"
	"github.com/morsok/comic-handler/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Issue is the client for interacting with the Issue builders.
	Issue *IssueClient
	// ReadingList is the client for interacting with the ReadingList builders.
	ReadingList *ReadingListClient
	// ReleaseWeek is the client for interacting with the ReleaseWeek builders.
	ReleaseWeek *ReleaseWeekClient
	// Serie is the client for interacting with the Serie builders.
	Serie *SerieClient
	// StoryArc is the client for interacting with the StoryArc builders.
	StoryArc *StoryArcClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Issue = NewIssueClient(c.config)
	c.ReadingList = NewReadingListClient(c.config)
	c.ReleaseWeek = NewReleaseWeekClient(c.config)
	c.Serie = NewSerieClient(c.config)
	c.StoryArc = NewStoryArcClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Issue:       NewIssueClient(cfg),
		ReadingList: NewReadingListClient(cfg),
		ReleaseWeek: NewReleaseWeekClient(cfg),
		Serie:       NewSerieClient(cfg),
		StoryArc:    NewStoryArcClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Issue:       NewIssueClient(cfg),
		ReadingList: NewReadingListClient(cfg),
		ReleaseWeek: NewReleaseWeekClient(cfg),
		Serie:       NewSerieClient(cfg),
		StoryArc:    NewStoryArcClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Issue.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Issue.Use(hooks...)
	c.ReadingList.Use(hooks...)
	c.ReleaseWeek.Use(hooks...)
	c.Serie.Use(hooks...)
	c.StoryArc.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Issue.Intercept(interceptors...)
	c.ReadingList.Intercept(interceptors...)
	c.ReleaseWeek.Intercept(interceptors...)
	c.Serie.Intercept(interceptors...)
	c.StoryArc.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *IssueMutation:
		return c.Issue.mutate(ctx, m)
	case *ReadingListMutation:
		return c.ReadingList.mutate(ctx, m)
	case *ReleaseWeekMutation:
		return c.ReleaseWeek.mutate(ctx, m)
	case *SerieMutation:
		return c.Serie.mutate(ctx, m)
	case *StoryArcMutation:
		return c.StoryArc.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// IssueClient is a client for the Issue schema.
type IssueClient struct {
	config
}

// NewIssueClient returns a client for the Issue from the given config.
func NewIssueClient(c config) *IssueClient {
	return &IssueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `issue.Hooks(f(g(h())))`.
func (c *IssueClient) Use(hooks ...Hook) {
	c.hooks.Issue = append(c.hooks.Issue, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `issue.Intercept(f(g(h())))`.
func (c *IssueClient) Intercept(interceptors ...Interceptor) {
	c.inters.Issue = append(c.inters.Issue, interceptors...)
}

// Create returns a builder for creating a Issue entity.
func (c *IssueClient) Create() *IssueCreate {
	mutation := newIssueMutation(c.config, OpCreate)
	return &IssueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Issue entities.
func (c *IssueClient) CreateBulk(builders ...*IssueCreate) *IssueCreateBulk {
	return &IssueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Issue.
func (c *IssueClient) Update() *IssueUpdate {
	mutation := newIssueMutation(c.config, OpUpdate)
	return &IssueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IssueClient) UpdateOne(i *Issue) *IssueUpdateOne {
	mutation := newIssueMutation(c.config, OpUpdateOne, withIssue(i))
	return &IssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IssueClient) UpdateOneID(id int) *IssueUpdateOne {
	mutation := newIssueMutation(c.config, OpUpdateOne, withIssueID(id))
	return &IssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Issue.
func (c *IssueClient) Delete() *IssueDelete {
	mutation := newIssueMutation(c.config, OpDelete)
	return &IssueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IssueClient) DeleteOne(i *Issue) *IssueDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IssueClient) DeleteOneID(id int) *IssueDeleteOne {
	builder := c.Delete().Where(issue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IssueDeleteOne{builder}
}

// Query returns a query builder for Issue.
func (c *IssueClient) Query() *IssueQuery {
	return &IssueQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIssue},
		inters: c.Interceptors(),
	}
}

// Get returns a Issue entity by its id.
func (c *IssueClient) Get(ctx context.Context, id int) (*Issue, error) {
	return c.Query().Where(issue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IssueClient) GetX(ctx context.Context, id int) *Issue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IssueClient) Hooks() []Hook {
	return c.hooks.Issue
}

// Interceptors returns the client interceptors.
func (c *IssueClient) Interceptors() []Interceptor {
	return c.inters.Issue
}

func (c *IssueClient) mutate(ctx context.Context, m *IssueMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IssueCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IssueUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IssueDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Issue mutation op: %q", m.Op())
	}
}

// ReadingListClient is a client for the ReadingList schema.
type ReadingListClient struct {
	config
}

// NewReadingListClient returns a client for the ReadingList from the given config.
func NewReadingListClient(c config) *ReadingListClient {
	return &ReadingListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `readinglist.Hooks(f(g(h())))`.
func (c *ReadingListClient) Use(hooks ...Hook) {
	c.hooks.ReadingList = append(c.hooks.ReadingList, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `readinglist.Intercept(f(g(h())))`.
func (c *ReadingListClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReadingList = append(c.inters.ReadingList, interceptors...)
}

// Create returns a builder for creating a ReadingList entity.
func (c *ReadingListClient) Create() *ReadingListCreate {
	mutation := newReadingListMutation(c.config, OpCreate)
	return &ReadingListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReadingList entities.
func (c *ReadingListClient) CreateBulk(builders ...*ReadingListCreate) *ReadingListCreateBulk {
	return &ReadingListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReadingList.
func (c *ReadingListClient) Update() *ReadingListUpdate {
	mutation := newReadingListMutation(c.config, OpUpdate)
	return &ReadingListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReadingListClient) UpdateOne(rl *ReadingList) *ReadingListUpdateOne {
	mutation := newReadingListMutation(c.config, OpUpdateOne, withReadingList(rl))
	return &ReadingListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReadingListClient) UpdateOneID(id int) *ReadingListUpdateOne {
	mutation := newReadingListMutation(c.config, OpUpdateOne, withReadingListID(id))
	return &ReadingListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReadingList.
func (c *ReadingListClient) Delete() *ReadingListDelete {
	mutation := newReadingListMutation(c.config, OpDelete)
	return &ReadingListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReadingListClient) DeleteOne(rl *ReadingList) *ReadingListDeleteOne {
	return c.DeleteOneID(rl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReadingListClient) DeleteOneID(id int) *ReadingListDeleteOne {
	builder := c.Delete().Where(readinglist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReadingListDeleteOne{builder}
}

// Query returns a query builder for ReadingList.
func (c *ReadingListClient) Query() *ReadingListQuery {
	return &ReadingListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReadingList},
		inters: c.Interceptors(),
	}
}

// Get returns a ReadingList entity by its id.
func (c *ReadingListClient) Get(ctx context.Context, id int) (*ReadingList, error) {
	return c.Query().Where(readinglist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReadingListClient) GetX(ctx context.Context, id int) *ReadingList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReadingListClient) Hooks() []Hook {
	return c.hooks.ReadingList
}

// Interceptors returns the client interceptors.
func (c *ReadingListClient) Interceptors() []Interceptor {
	return c.inters.ReadingList
}

func (c *ReadingListClient) mutate(ctx context.Context, m *ReadingListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReadingListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReadingListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReadingListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReadingListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReadingList mutation op: %q", m.Op())
	}
}

// ReleaseWeekClient is a client for the ReleaseWeek schema.
type ReleaseWeekClient struct {
	config
}

// NewReleaseWeekClient returns a client for the ReleaseWeek from the given config.
func NewReleaseWeekClient(c config) *ReleaseWeekClient {
	return &ReleaseWeekClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `releaseweek.Hooks(f(g(h())))`.
func (c *ReleaseWeekClient) Use(hooks ...Hook) {
	c.hooks.ReleaseWeek = append(c.hooks.ReleaseWeek, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `releaseweek.Intercept(f(g(h())))`.
func (c *ReleaseWeekClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReleaseWeek = append(c.inters.ReleaseWeek, interceptors...)
}

// Create returns a builder for creating a ReleaseWeek entity.
func (c *ReleaseWeekClient) Create() *ReleaseWeekCreate {
	mutation := newReleaseWeekMutation(c.config, OpCreate)
	return &ReleaseWeekCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReleaseWeek entities.
func (c *ReleaseWeekClient) CreateBulk(builders ...*ReleaseWeekCreate) *ReleaseWeekCreateBulk {
	return &ReleaseWeekCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReleaseWeek.
func (c *ReleaseWeekClient) Update() *ReleaseWeekUpdate {
	mutation := newReleaseWeekMutation(c.config, OpUpdate)
	return &ReleaseWeekUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReleaseWeekClient) UpdateOne(rw *ReleaseWeek) *ReleaseWeekUpdateOne {
	mutation := newReleaseWeekMutation(c.config, OpUpdateOne, withReleaseWeek(rw))
	return &ReleaseWeekUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReleaseWeekClient) UpdateOneID(id int) *ReleaseWeekUpdateOne {
	mutation := newReleaseWeekMutation(c.config, OpUpdateOne, withReleaseWeekID(id))
	return &ReleaseWeekUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReleaseWeek.
func (c *ReleaseWeekClient) Delete() *ReleaseWeekDelete {
	mutation := newReleaseWeekMutation(c.config, OpDelete)
	return &ReleaseWeekDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReleaseWeekClient) DeleteOne(rw *ReleaseWeek) *ReleaseWeekDeleteOne {
	return c.DeleteOneID(rw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReleaseWeekClient) DeleteOneID(id int) *ReleaseWeekDeleteOne {
	builder := c.Delete().Where(releaseweek.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReleaseWeekDeleteOne{builder}
}

// Query returns a query builder for ReleaseWeek.
func (c *ReleaseWeekClient) Query() *ReleaseWeekQuery {
	return &ReleaseWeekQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReleaseWeek},
		inters: c.Interceptors(),
	}
}

// Get returns a ReleaseWeek entity by its id.
func (c *ReleaseWeekClient) Get(ctx context.Context, id int) (*ReleaseWeek, error) {
	return c.Query().Where(releaseweek.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReleaseWeekClient) GetX(ctx context.Context, id int) *ReleaseWeek {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReleaseWeekClient) Hooks() []Hook {
	return c.hooks.ReleaseWeek
}

// Interceptors returns the client interceptors.
func (c *ReleaseWeekClient) Interceptors() []Interceptor {
	return c.inters.ReleaseWeek
}

func (c *ReleaseWeekClient) mutate(ctx context.Context, m *ReleaseWeekMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReleaseWeekCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReleaseWeekUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReleaseWeekUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReleaseWeekDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReleaseWeek mutation op: %q", m.Op())
	}
}

// SerieClient is a client for the Serie schema.
type SerieClient struct {
	config
}

// NewSerieClient returns a client for the Serie from the given config.
func NewSerieClient(c config) *SerieClient {
	return &SerieClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serie.Hooks(f(g(h())))`.
func (c *SerieClient) Use(hooks ...Hook) {
	c.hooks.Serie = append(c.hooks.Serie, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serie.Intercept(f(g(h())))`.
func (c *SerieClient) Intercept(interceptors ...Interceptor) {
	c.inters.Serie = append(c.inters.Serie, interceptors...)
}

// Create returns a builder for creating a Serie entity.
func (c *SerieClient) Create() *SerieCreate {
	mutation := newSerieMutation(c.config, OpCreate)
	return &SerieCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Serie entities.
func (c *SerieClient) CreateBulk(builders ...*SerieCreate) *SerieCreateBulk {
	return &SerieCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Serie.
func (c *SerieClient) Update() *SerieUpdate {
	mutation := newSerieMutation(c.config, OpUpdate)
	return &SerieUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SerieClient) UpdateOne(s *Serie) *SerieUpdateOne {
	mutation := newSerieMutation(c.config, OpUpdateOne, withSerie(s))
	return &SerieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SerieClient) UpdateOneID(id int) *SerieUpdateOne {
	mutation := newSerieMutation(c.config, OpUpdateOne, withSerieID(id))
	return &SerieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Serie.
func (c *SerieClient) Delete() *SerieDelete {
	mutation := newSerieMutation(c.config, OpDelete)
	return &SerieDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SerieClient) DeleteOne(s *Serie) *SerieDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SerieClient) DeleteOneID(id int) *SerieDeleteOne {
	builder := c.Delete().Where(serie.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SerieDeleteOne{builder}
}

// Query returns a query builder for Serie.
func (c *SerieClient) Query() *SerieQuery {
	return &SerieQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSerie},
		inters: c.Interceptors(),
	}
}

// Get returns a Serie entity by its id.
func (c *SerieClient) Get(ctx context.Context, id int) (*Serie, error) {
	return c.Query().Where(serie.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SerieClient) GetX(ctx context.Context, id int) *Serie {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SerieClient) Hooks() []Hook {
	return c.hooks.Serie
}

// Interceptors returns the client interceptors.
func (c *SerieClient) Interceptors() []Interceptor {
	return c.inters.Serie
}

func (c *SerieClient) mutate(ctx context.Context, m *SerieMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SerieCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SerieUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SerieUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SerieDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Serie mutation op: %q", m.Op())
	}
}

// StoryArcClient is a client for the StoryArc schema.
type StoryArcClient struct {
	config
}

// NewStoryArcClient returns a client for the StoryArc from the given config.
func NewStoryArcClient(c config) *StoryArcClient {
	return &StoryArcClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storyarc.Hooks(f(g(h())))`.
func (c *StoryArcClient) Use(hooks ...Hook) {
	c.hooks.StoryArc = append(c.hooks.StoryArc, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storyarc.Intercept(f(g(h())))`.
func (c *StoryArcClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoryArc = append(c.inters.StoryArc, interceptors...)
}

// Create returns a builder for creating a StoryArc entity.
func (c *StoryArcClient) Create() *StoryArcCreate {
	mutation := newStoryArcMutation(c.config, OpCreate)
	return &StoryArcCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoryArc entities.
func (c *StoryArcClient) CreateBulk(builders ...*StoryArcCreate) *StoryArcCreateBulk {
	return &StoryArcCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoryArc.
func (c *StoryArcClient) Update() *StoryArcUpdate {
	mutation := newStoryArcMutation(c.config, OpUpdate)
	return &StoryArcUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoryArcClient) UpdateOne(sa *StoryArc) *StoryArcUpdateOne {
	mutation := newStoryArcMutation(c.config, OpUpdateOne, withStoryArc(sa))
	return &StoryArcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoryArcClient) UpdateOneID(id int) *StoryArcUpdateOne {
	mutation := newStoryArcMutation(c.config, OpUpdateOne, withStoryArcID(id))
	return &StoryArcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoryArc.
func (c *StoryArcClient) Delete() *StoryArcDelete {
	mutation := newStoryArcMutation(c.config, OpDelete)
	return &StoryArcDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoryArcClient) DeleteOne(sa *StoryArc) *StoryArcDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoryArcClient) DeleteOneID(id int) *StoryArcDeleteOne {
	builder := c.Delete().Where(storyarc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoryArcDeleteOne{builder}
}

// Query returns a query builder for StoryArc.
func (c *StoryArcClient) Query() *StoryArcQuery {
	return &StoryArcQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoryArc},
		inters: c.Interceptors(),
	}
}

// Get returns a StoryArc entity by its id.
func (c *StoryArcClient) Get(ctx context.Context, id int) (*StoryArc, error) {
	return c.Query().Where(storyarc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoryArcClient) GetX(ctx context.Context, id int) *StoryArc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoryArcClient) Hooks() []Hook {
	return c.hooks.StoryArc
}

// Interceptors returns the client interceptors.
func (c *StoryArcClient) Interceptors() []Interceptor {
	return c.inters.StoryArc
}

func (c *StoryArcClient) mutate(ctx context.Context, m *StoryArcMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoryArcCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoryArcUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoryArcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoryArcDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoryArc mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}
