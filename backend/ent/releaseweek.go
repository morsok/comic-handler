// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/morsok/comic-handler/ent/releaseweek"
)

// ReleaseWeek is the model entity for the ReleaseWeek schema.
type ReleaseWeek struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReleaseWeek) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case releaseweek.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReleaseWeek", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReleaseWeek fields.
func (rw *ReleaseWeek) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case releaseweek.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rw.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this ReleaseWeek.
// Note that you need to call ReleaseWeek.Unwrap() before calling this method if this ReleaseWeek
// was returned from a transaction, and the transaction was committed or rolled back.
func (rw *ReleaseWeek) Update() *ReleaseWeekUpdateOne {
	return NewReleaseWeekClient(rw.config).UpdateOne(rw)
}

// Unwrap unwraps the ReleaseWeek entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rw *ReleaseWeek) Unwrap() *ReleaseWeek {
	_tx, ok := rw.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReleaseWeek is not a transactional entity")
	}
	rw.config.driver = _tx.drv
	return rw
}

// String implements the fmt.Stringer.
func (rw *ReleaseWeek) String() string {
	var builder strings.Builder
	builder.WriteString("ReleaseWeek(")
	builder.WriteString(fmt.Sprintf("id=%v", rw.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ReleaseWeeks is a parsable slice of ReleaseWeek.
type ReleaseWeeks []*ReleaseWeek

func (rw ReleaseWeeks) config(cfg config) {
	for _i := range rw {
		rw[_i].config = cfg
	}
}
